{"version":3,"sources":["../../../src/app/models/books.js"],"names":["dayjs","require","Sequelize","module","exports","sequelize","DataTypes","define","isbn","autoIncrement","type","INTEGER","allowNull","primaryKey","author_id","BIGINT","references","model","tableName","schema","key","book_title","STRING","book_desc","date_of_request","DATE","get","getDataValue","format","book_payload","JSON","defaultValue","status","author_prices_request","DOUBLE","create_date","literal","create_by","update_date","update_by","timestamps","indexes","name","unique","fields"],"mappings":"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","sourcesContent":["/* jshint indent: 2 */\n\nconst dayjs = require('dayjs');\nconst Sequelize = require('sequelize');\nmodule.exports = function(sequelize, DataTypes) {\n  return sequelize.define('books', {\n    isbn: {\n      autoIncrement: true,\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true\n    },\n    author_id: {\n      type: DataTypes.BIGINT,\n      allowNull: true,\n      references: {\n        model: {\n          tableName: 'authors',\n          schema: 'san_francisco'\n        },\n        key: 'author_id'\n      }\n    },\n    book_title: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    book_desc: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    date_of_request: {\n      type: DataTypes.DATE,\n      allowNull: true,\n      get: function() {\n        return dayjs(this.getDataValue('date_of_request')).format('DD/MM/YYYY HH:mm:ss')\n     }\n    },\n    book_payload: {\n      type: DataTypes.JSON,\n      allowNull: true\n    },\n    'active_ï¬‚ag': {\n      type: DataTypes.STRING(1),\n      allowNull: false,\n      defaultValue: \"Y\"\n    },\n    status: {\n      type: DataTypes.STRING,\n      allowNull: true,\n      defaultValue: \"PENDING\"\n    },\n    author_prices_request: {\n      type: DataTypes.DOUBLE,\n      allowNull: true\n    },\n    create_date: {\n      type: DataTypes.DATE,\n      allowNull: false,\n      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n      get: function() {\n        return dayjs(this.getDataValue('create_date')).format('DD/MM/YYYY HH:mm:ss')\n     }\n    },\n    create_by: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    update_date: {\n      type: DataTypes.DATE,\n      allowNull: false,\n      defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),\n      get: function() {\n        return dayjs(this.getDataValue('update_date')).format('DD/MM/YYYY HH:mm:ss')\n     }\n    },\n    update_by: {\n      type: DataTypes.STRING,\n      allowNull: true\n    }\n  }, {\n    sequelize,\n    tableName: 'books',\n    schema: 'san_francisco',\n    timestamps: false,\n    indexes: [\n      {\n        name: \"books_pkey\",\n        unique: true,\n        fields: [\n          { name: \"isbn\" },\n        ]\n      },\n    ]\n  });\n};\n"],"file":"books.js"}