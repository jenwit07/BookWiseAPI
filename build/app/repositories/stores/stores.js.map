{"version":3,"sources":["../../../../src/app/repositories/stores/stores.js"],"names":["getAllStores","req","query","cur_page","per_page","rest","Promise","resolve","reject","apiModels","stores","findAndCountAll","offset","limit","include","model","address","required","where","active_flag","then","obj","e","createStoreService","name","detail","address_id","console","log","Error","stores_name","stores_details","create","raw","putStoreService","updatedStore","update","stores_id","result","err","error","deleteStoreService","deleteUser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC9B,MAAIC,KAAK,GAAGD,GAAG,CAACC,KAAhB;AACA,MAAMC,QAAN,GAAsCD,KAAtC,CAAMC,QAAN;AAAA,MAAgBC,QAAhB,GAAsCF,KAAtC,CAAgBE,QAAhB;AAAA,MAA6BC,IAA7B,6CAAsCH,KAAtC;AACA,SAAO,IAAII,OAAJ;AAAA,6FAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACXC,SAAS,CAACC,MAAV,CACLC,eADK,CACW;AACfC,gBAAAA,MAAM,EAAEX,GAAG,CAACW,MADG;AAEfC,gBAAAA,KAAK,EAAEZ,GAAG,CAACY,KAFI;AAGfC,gBAAAA,OAAO,EAAE,CACP;AACEC,kBAAAA,KAAK,EAAEN,SAAS,CAACO,OADnB;AAEEC,kBAAAA,QAAQ,EAAE;AAFZ,iBADO,CAHM;AASfC,gBAAAA,KAAK;AAAIC,kBAAAA,WAAW,EAAE;AAAjB,mBAA0Bd,IAA1B;AATU,eADX,EAYHe,IAZG,CAYE,UAACC,GAAD,EAAS;AACbd,gBAAAA,OAAO,CAACc,GAAD,CAAP;AACD,eAdG,WAeG,UAACC,CAAD,EAAO;AACZd,gBAAAA,MAAM,CAACc,CAAD,CAAN;AACD,eAjBG,CADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAoBH;;AAEM,SAASC,kBAAT,QAAwD;AAAA,MAA3BC,IAA2B,SAA3BA,IAA2B;AAAA,MAArBC,MAAqB,SAArBA,MAAqB;AAAA,MAAbC,UAAa,SAAbA,UAAa;AAC7DC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB,gBAAnB,EAAqC;AAACJ,IAAAA,IAAI,EAAJA,IAAD;AAAOC,IAAAA,MAAM,EAANA,MAAP;AAAeC,IAAAA,UAAU,EAAVA;AAAf,GAArC;AACA,MAAG,CAACF,IAAD,IAAS,CAACE,UAAb,EAAyB,MAAM,IAAIG,KAAJ,CAAU,uDAAV,CAAN;AACzB,SAAO,IAAIvB,OAAJ;AAAA,8FAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEbN,cAAAA,KAFa,GAEL;AACVwB,gBAAAA,UAAU,EAAEA,UADF;AAEVI,gBAAAA,WAAW,EAAEN,IAFH;AAGVO,gBAAAA,cAAc,EAAEN;AAHN,eAFK;AAAA;AAAA,qBAOXhB,SAAS,CAACC,MAAV,CAAiBsB,MAAjB,iCACD9B,KADC;AAEJ+B,gBAAAA,GAAG,EAAE;AAFD,kBAGHb,IAHG,CAGE,UAACC,GAAD,EAAS;AACfd,gBAAAA,OAAO,CAACc,GAAD,CAAP;AACD,eALK,WAMC,UAACC,CAAD,EAAO;AACZd,gBAAAA,MAAM,CAACc,CAAD,CAAN;AACD,eARK,CAPW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAiBD;;AAEM,IAAMY,eAAe,GAAG,SAAlBA,eAAkB,CAACC,YAAD,EAAkB;AAC/C,SAAO,IAAI7B,OAAJ;AAAA,8FAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXN,cAAAA,KAFW,qBAEEiC,YAFF;AAIfR,cAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AACAyB,cAAAA,OAAO,CAACC,GAAR,CAAY;AACVF,gBAAAA,UAAU,EAAExB,KAAK,CAACwB,UADR;AAEVI,gBAAAA,WAAW,EAAE5B,KAAK,CAACsB,IAFT;AAGVO,gBAAAA,cAAc,EAAE7B,KAAK,CAACuB;AAHZ,eAAZ;AANe;AAAA,qBAYThB,SAAS,CAACC,MAAV,CACH0B,MADG,CAEF;AACEV,gBAAAA,UAAU,EAAExB,KAAK,CAACwB,UADpB;AAEEI,gBAAAA,WAAW,EAAE5B,KAAK,CAACsB,IAFrB;AAGEO,gBAAAA,cAAc,EAAE7B,KAAK,CAACuB;AAHxB,eAFE,EAOF;AACEP,gBAAAA,KAAK,EAAE;AACLmB,kBAAAA,SAAS,EAAEnC,KAAK,CAACmC;AADZ;AADT,eAPE,EAaHjB,IAbG,CAaE,UAACkB,MAAD,EAAY;AAChB/B,gBAAAA,OAAO,CAAC+B,MAAD,CAAP;AACD,eAfG,WAgBG,UAACC,GAAD,EAAS;AACdZ,gBAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACA/B,gBAAAA,MAAM,CAAC+B,GAAD,CAAN;AACD,eAnBG,CAZS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAoCD,CArCM;;;;AAuCA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,UAAD,EAAgB;AAChD,SAAO,IAAIpC,OAAJ;AAAA,8FAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXN,cAAAA,KAFW,qBAEEwC,UAFF;AAGff,cAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAY1B,KAAZ;AAJe;AAAA,qBAKTO,SAAS,CAACC,MAAV,CACH0B,MADG,CAEF;AAAEjB,gBAAAA,WAAW,EAAE;AAAf,eAFE,EAGF;AACED,gBAAAA,KAAK,EAAE;AACLmB,kBAAAA,SAAS,EAAEnC,KAAK,CAACmC;AADZ;AADT,eAHE,EASHjB,IATG,CASE,UAACkB,MAAD,EAAY;AAChB/B,gBAAAA,OAAO,CAAC+B,MAAD,CAAP;AACD,eAXG,WAYG,UAACC,GAAD,EAAS;AACdZ,gBAAAA,OAAO,CAACa,KAAR,CAAcD,GAAd;AACA/B,gBAAAA,MAAM,CAAC+B,GAAD,CAAN;AACD,eAfG,CALS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAyBD,CA1BM","sourcesContent":["export function getAllStores(req) {\r\n    let query = req.query\r\n    let { cur_page, per_page, ...rest } = query;\r\n    return new Promise(async (resolve, reject) => {\r\n      await apiModels.stores\r\n      .findAndCountAll({\r\n        offset: req.offset,\r\n        limit: req.limit,\r\n        include: [\r\n          {\r\n            model: apiModels.address,\r\n            required: true,\r\n          },\r\n        ],\r\n        where: { active_flag: true ,...rest },\r\n      })\r\n        .then((obj) => {\r\n          resolve(obj);\r\n        })\r\n        .catch((e) => {\r\n          reject(e);\r\n        });\r\n    });\r\n}\r\n\r\nexport function createStoreService({name, detail, address_id}) {\r\n  console.log('%câ§­', 'color: #ff0000', {name, detail, address_id});\r\n  if(!name || !address_id) throw new Error(\"missing required parameter name, detail or address_id\")\r\n  return new Promise(async (resolve, reject) => {\r\n\r\n    let query = {\r\n      address_id: address_id,\r\n      stores_name: name,\r\n      stores_details: detail\r\n    }\r\n    await apiModels.stores.create({\r\n      ...query,\r\n      raw: true,\r\n    }).then((obj) => {\r\n      resolve(obj);\r\n    })\r\n    .catch((e) => {\r\n      reject(e);\r\n    });\r\n  });\r\n}\r\n\r\nexport const putStoreService = (updatedStore) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      let query = { ...updatedStore };\r\n\r\n      console.log(\"###### updated stores : putStoreService ######\");\r\n      console.log(query);\r\n      console.log({\r\n        address_id: query.address_id,\r\n        stores_name: query.name,\r\n        stores_details: query.detail\r\n      });\r\n\r\n      await apiModels.stores\r\n        .update(\r\n          {\r\n            address_id: query.address_id,\r\n            stores_name: query.name,\r\n            stores_details: query.detail\r\n          },\r\n          {\r\n            where: {\r\n              stores_id: query.stores_id\r\n            },\r\n          }\r\n        )\r\n        .then((result) => {\r\n          resolve(result);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n          reject(err);\r\n        });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  });\r\n};\r\n\r\nexport const deleteStoreService = (deleteUser) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      let query = { ...deleteUser };\r\n      console.log(\"###### delete user ######\");\r\n      console.log(query);\r\n      await apiModels.stores\r\n        .update(\r\n          { active_flag: false },\r\n          {\r\n            where: {\r\n              stores_id: query.stores_id,\r\n            },\r\n          }\r\n        )\r\n        .then((result) => {\r\n          resolve(result);\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n          reject(err);\r\n        });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  });\r\n};\r\n"],"file":"stores.js"}