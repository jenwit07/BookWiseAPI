{"version":3,"sources":["../../../../src/app/repositories/address/address.js"],"names":["createAddressService","gps","zipCode","addressLine1","addressLine2","university","Promise","resolve","reject","query","zipcode","lat","lng","lat_long","console","log","apiModels","address","create","results","get","raw","putAddressService","address_id","update","where","then","result","err","error","deleteAddressService","active_flag"],"mappings":"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","sourcesContent":["export const createAddressService = ({\r\n    gps,\r\n    zipCode,\r\n    addressLine1,\r\n    addressLine2,\r\n    university\r\n}) => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            // # normalize locale obj\r\n            let query = {\r\n                zipcode: zipCode,\r\n                addressLine1,\r\n                addressLine2,\r\n                university\r\n            };\r\n\r\n            if(gps?.lat && gps?.lng) {\r\n                query.lat_long = `(${gps?.lat},${gps?.lng})`\r\n            }\r\n            console.log('%c⧭', 'color: #00e600', query);\r\n\r\n            let results = await apiModels.address.create(query);\r\n\r\n            console.log(\"### created new address ###\");\r\n            console.log(results.get({ raw: true }));\r\n\r\n            resolve(results.get({ raw: true }));\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n};\r\n\r\nexport const putAddressService = ({\r\n    address_id,\r\n    gps,\r\n    zipCode,\r\n    addressLine1,\r\n    addressLine2,\r\n    university\r\n}) => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            console.log(\"###### updated address : putStoreService ######\");\r\n            console.log(query);\r\n            console.log({\r\n                gps,\r\n                zipCode,\r\n                addressLine1,\r\n                addressLine2,\r\n                university\r\n            });\r\n            // # normalize locale obj\r\n            let query = {\r\n                zipcode: zipCode,\r\n                addressLine1,\r\n                addressLine2,\r\n                university\r\n            };\r\n\r\n            if(gps?.lat && gps?.lng) {\r\n                query.lat_long = `(${gps?.lat},${gps?.lng})`\r\n            }\r\n            console.log('%c⧭', 'color: #00e600', query);\r\n        \r\n            await apiModels.address\r\n                .update(\r\n                    {\r\n                        ...query\r\n                    },\r\n                    {\r\n                        where: {\r\n                            address_id: address_id\r\n                        },\r\n                    }\r\n                )\r\n            .then((result) => {\r\n                resolve(result);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n                reject(err);\r\n            });\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n    });\r\n};\r\n\r\nexport const deleteAddressService = ({address_id}) => {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            await apiModels.address\r\n                .update(\r\n                    { active_flag: false },\r\n                    {\r\n                        where: {\r\n                            address_id: address_id,\r\n                        },\r\n                    }\r\n                )\r\n                .then((result) => {\r\n                    resolve(result);\r\n                })\r\n                .catch((err) => {\r\n                console.error(err);\r\n                reject(err);\r\n            });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    });\r\n};\r\n"],"file":"address.js"}