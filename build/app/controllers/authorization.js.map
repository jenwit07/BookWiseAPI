{"version":3,"sources":["../../../src/app/controllers/authorization.js"],"names":["shopModel","db","membersModel","accessModel","loginRequest","req","res","payload","sub","body","username","iat","Date","getTime","type","_token","jwt","encode","commonKey","secreatKey","usernameObj","findOne","where","then","obj","_userID","userID","console","log","accessObj","token","create","c","categoryList","forEach","element","push","categoryID","categoryName","json","success","accessToken","category","err","registerRequest","shopObj","contactFName","contactLName","Address","City","State","PostalCode","Email","Url","PaymentMethod","companyName","TypeGoods","memberObj","shopID","password","salt","userType","util","inspect","count","info","_shopID","_userName","message","logoutRequest","header","destroy","data","e"],"mappings":"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","sourcesContent":["import jwt from 'jwt-simple';\r\nimport commonKey from '../../config/commonKey'\r\nimport util from 'util'\r\nimport { category } from '../repositories/summary/category'\r\nimport db from '../../config/db.config'\r\n\r\nconst shopModel = db.shopModel\r\nconst membersModel = db.membersModel\r\nconst accessModel = db.accessModel\r\n\r\n/* signIn method */\r\nexport async function loginRequest(req, res) {\r\n\r\n  const payload = {\r\n    sub: req.body.username,\r\n    iat: new Date().getTime(),\r\n    type: 'customer'\r\n  }\r\n\r\n  const _token = jwt.encode(payload, commonKey.secreatKey)\r\n\r\n  let usernameObj = {\r\n    username: `${req.body.username}`\r\n  }\r\n\r\n  var _userID\r\n\r\n  await membersModel.findOne({ where: usernameObj }).then((obj) => {\r\n    _userID = obj.userID;\r\n    console.log('user id : ' + _userID + 'username : ' + usernameObj.username)\r\n  })\r\n\r\n  var accessObj = {\r\n    userID: _userID,\r\n    username: req.body.username,\r\n    token: _token,\r\n  }\r\n\r\n  await accessModel.create(accessObj).then((obj) => {\r\n    if (obj) {\r\n      console.log('this case')\r\n      \r\n      category().then((c) => {\r\n        let categoryList = []\r\n        c.forEach(element => {\r\n          categoryList.push(\r\n            {\r\n              categoryID: element.categoryID,\r\n              categoryName: element.categoryName\r\n            }\r\n          )\r\n        })\r\n\r\n        return res.json({ success: true, accessToken: _token, category: categoryList})\r\n\r\n      }).catch((err) => {\r\n        return res.json({ success: false, err: `Service Error` })\r\n        \r\n      })\r\n\r\n    } else {\r\n      console.log(`Service cannot insert record into table EAW_ACCESS`)\r\n      return res.json({ success: false, err: `Service Error` })\r\n\r\n    }\r\n  })\r\n\r\n}\r\n\r\n/* signUp method */\r\nexport async function registerRequest(req, res) {\r\n\r\n  /*\r\n    1.Validate Username ใน DB ว่ามีหรือป่าว ถ้าไม่มีไปต่อ ถ้ามี ดีดออก\r\n    2.Insert record ลงใน EAW_SHOP ถ้า Success เอา shopID มาใช้ต่อ ถ้า Err ดีดออก\r\n    3.Insert record ลงใน EAW_MEMBERS If Success Res Success esle rollback transaction\r\n  */\r\n\r\n  let shopObj = {\r\n    contactFName: req.body.contactFName,\r\n    contactLName: req.body.contactLName,\r\n    Address: req.body.Address,\r\n    City: req.body.City,\r\n    State: req.body.State,\r\n    PostalCode: req.body.PostalCode,\r\n    Email: req.body.Email,\r\n    Url: req.body.Url,\r\n    PaymentMethod: req.body.PaymentMethod,\r\n    companyName: req.body.companyName,\r\n    TypeGoods: req.body.TypeGoods\r\n  }\r\n\r\n  let _shopID;\r\n\r\n  let memberObj = {\r\n    shopID: '',\r\n    username: req.body.username,\r\n    password: req.body.password,\r\n    salt: '',\r\n    userType: 'Owner'\r\n  }\r\n\r\n  console.log('shopObj' + util.inspect(shopObj))\r\n  console.log('memberObj' + util.inspect(memberObj))\r\n\r\n  await membersModel.count({ where: { 'username': req.body.username } }).then(c => {\r\n    if (c > 0) {\r\n      console.log(`username ${req.body.username} are duplicated`)\r\n      return res.json({ success: false, err: `username ${req.body.username} are duplicated` })\r\n    } else {\r\n      console.log(`username isn't dupplicate`)\r\n\r\n      shopModel.create(shopObj).then((obj) => {\r\n        console.info('-----shopObj-----')\r\n        console.info(obj)\r\n\r\n        if (obj) {\r\n          _shopID = obj.shopID\r\n          memberObj.shopID = obj.shopID\r\n          console.log('EAW_SHOP was created with shopID : ' + _shopID)\r\n\r\n          membersModel.create(memberObj).then((obj) => {\r\n\r\n            console.log('-----memberObj-----')\r\n            console.info(obj)\r\n\r\n            if (obj) {\r\n              let _userID = obj.userID\r\n              let _userName = obj.username\r\n              console.log('EAW_MEMBER was created with userID : ' + _userID)\r\n              return res.json({ success: true, message: `SignUp Complete with userID ${_userID} and username ${_userName}` })\r\n            } else {\r\n              console.log(`Service cannot insert record into table EAW_MEMBER`)\r\n              return res.json({ success: false, err: `Service cannot insert record into table EAW_MEMBER` })\r\n\r\n              /* TODO : ROLLBACK shopModel with shopID */\r\n\r\n            }\r\n          })\r\n\r\n        } else {\r\n          return res.json({ success: false, err: `Service cannot insert record into table EAW_SHOP` })\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n}\r\n\r\n\r\n/* TODO : Log Out Methods */\r\nexport async function logoutRequest(req, res) {\r\n\r\n  let _token = req.header('authorization')\r\n\r\n  await accessModel.destroy({\r\n    where: {\r\n      token: _token\r\n    }\r\n\r\n  }).then(() => {\r\n    res.json({\r\n      success: true,\r\n      data: []\r\n    })\r\n\r\n  }).catch((e) => {\r\n    res.json({\r\n      success: false,\r\n      data: e\r\n    })\r\n\r\n  })\r\n\r\n\r\n\r\n}"],"file":"authorization.js"}